# SPDX-License-Identifier: GPL-2.0-or-later

#------------------------------------------------------------------------------
# Microchip RISC-V
#------------------------------------------------------------------------------

# PolarFire SoC (MPFS) hart id to name lookup table
array set mpfs_hart_names {
	0	hart0_e51
	1	hart1_u54_1
	2	hart2_u54_2
	3	hart3_u54_3
	4	hart4_u54_4
}

# PIC64GX hart id to name lookup table
array set pic64gx_hart_names {
	0	hart0_e51
	1	hart1_u54_1
	2	hart2_u54_2
	3	hart3_u54_3
	4	hart4_u54_4
}

# Device tapname tapname to IDCODE lookup tables

# MPFS devices table
set mpfs_cpu_tap_info {
	MPFS025  0x0f8531cf
	MPFS095  0x0f8181cf
	MPFS160  0x0f8191cf
	MPFS250  0x0f81a1cf
	MPFS460  0x0f81b1cf
	RTPFS160 0x0f8991cf
	RTPFS460 0x0f89b1cf
}

# PIC64GX table
set pic64gx_tap_info {
	PIC64GX1000 0x0f8531cf
}

# PolarFire table
set polarfire_tap_info {
	MPF050     0x0f8101cf
	MPF100     0x0f8111cf
	MPF200     0x0f8121cf
	MPF300     0x0f8131cf
	MPF500     0x0f8141cf
	RTPF500-A  0x8f8141cf
	RTPF500    0x0f8941cf
	MPFS250  0x0f81a1cf
}

# RTG4 table
set rtg4_tap_info {
	RT4P6000  0x007001cf
	RT4P12000 0x007011cf
	RT4P16000 0x007021cf
}

# MiV Soft Processor table
set miv_tap_info {
	MiV1 0x10e31913
	MiV2 0x1c0011cf
	MiV3 0x1e50105f
}

proc expected_ids {tap_list} {
	set str ""
	dict for {key value} $tap_list {
		append str "-expected-id" " " $value " "
	}

	return $str
}

proc get_tap_type {idcode_in tap_list} {
	set str "unknown"
	set idcode "0x"
	append idcode $idcode_in

	dict for {key value} $tap_list {
		if {$value == $idcode} {
			set str ""
			append str $key " " "TAP"
		}
	}

	return $str
}

# Process DEVICE variable
if {![exists DEVICE]} {
	# Not set so default to the generic FPGA
	set DEVICE "fpga"
} else {
	# Normalise - convert to lowercase
	set DEVICE [string tolower $DEVICE]
}

# Treat "G5SOC" as legacy synonym for "MPFS"
if {[string range $DEVICE 0 4] eq "g5soc"} {
	set DEVICE "mpfs"
}

# Process COREID variable
if {![exists COREID]} {
	set COREID -1
}

# COREID
# For Multi-Hart setups, check COREID, default to -1 (single debug connection
# to all harts) if unspecified or invalid (out of range )
proc handle_coreid {lower_bound upper_bound coreid} {
	if {$coreid < $lower_bound || $coreid > $upper_bound} {
		echo [format "Warn : COREID %s not in range ($lower_bound..$upper_bound), defaulting to -1 (single connection to all harts)" $coreid]
		set coreid -1
	}

	return $coreid
}

proc setup_tunnelled_miv {device fpga_tap_info soft_cpu_tap_info} {
	# TAP management event handlers/procedures

	# Switch from FPGA TAP to MiV CPU DTM TAP (by tunnelling JTAG via UJTAG)
	proc switch_from_fpga_tap_to_riscv_tap {fpga_tap riscv_tap} {
		jtag tapdisable $fpga_tap
		jtag tapenable $riscv_tap
	}

	# Disable/bypass FPGA TAP
	proc disable_fpga_tap {fpga_tap} {
		# Tell UJTAG/uj_jtag to address MiV CPU DTM
		irscan $fpga_tap 0x55 -endstate IRPAUSE
		runtest 8

		# Enable ujtag tunnelled JTAG - ir width 5
		riscv use_bscan_tunnel 5 2
	}

	# Enable MiV CPU DTM TAP
	proc enable_riscv_tap {} {
		# Nothing to do here - the work is done in disable_fpga_tap
		# but the handler still needs to be defined
	}

	# FPGA TAP present, occludes MiV CPU DTM TAP and must be
	# disabled/bypassed first

	# Parent FPGA TAP
	set irlen 8
	set expected_ids [expected_ids $fpga_tap_info]
	eval jtag newtap $device tap -irlen $irlen $expected_ids -ignore-version
	jtag configure $device.tap -event tap-disable "disable_fpga_tap $device.tap"
	jtag configure $device.tap -event setup "switch_from_fpga_tap_to_riscv_tap $device.tap $device.cpu"

	# Tunnelled MiV CPU DTM TAP - disabled/not visible by default until FPGA TAP
	# disabled/bypassed
	set irlen 5
	set expected_ids [expected_ids $soft_cpu_tap_info]
	eval jtag newtap $device cpu -irlen 5 $expected_ids -ignore-version -disable
	jtag configure $device.cpu -event tap-enable enable_riscv_tap
	# Mi-V soft core - implicitly single hart
	set _TARGETNAME_0 $device.miv
	target create $_TARGETNAME_0 riscv -chain-position $device.cpu

	$_TARGETNAME_0 configure -event reset-init board_reset_init
	$_TARGETNAME_0 configure -event reset-init init_regs

	# gdb-detach event handler
	$_TARGETNAME_0 configure -event gdb-detach {
		# resume execution on debugger detach
		resume
	}

	#
	# Utility procedures
	#

	proc board_reset_init {} {
		# call board level reset-init if defined
		if {[exists -proc do_board_reset_init]} {
			do_board_reset_init
		}
	}

	proc init_regs {} {
		reg pc 0
	}

	#
	# Reset configuration
	#

	# Only TRSTn supported
	reset_config trst_only
}

# "Direct" debugging (not via FPGA TAP) to MiV
proc setup_miv {device tap_info} {
	set irlen 5
	set expected_ids [expected_ids $tap_info]

	# RISC-V CPU DTM TAP
	eval jtag newtap $device cpu -irlen $irlen $expected_ids -ignore-version
	# Mi-V soft core - implicitly single hart
	set _TARGETNAME_0 $device.miv
	target create $_TARGETNAME_0 riscv -chain-position $device.cpu

	$_TARGETNAME_0 configure -event reset-init board_reset_init
	$_TARGETNAME_0 configure -event reset-init init_regs

	# gdb-detach event handler
	$_TARGETNAME_0 configure -event gdb-detach {
		# resume execution on debugger detach
		resume
	}

	#
	# Utility procedures
	#

	proc board_reset_init {} {
		# call board level reset-init if defined
		if {[exists -proc do_board_reset_init]} {
			do_board_reset_init
		}
	}

	proc init_regs {} {
		reg pc 0
	}

	#
	# Reset configuration
	#

	# Only TRSTn supported
	reset_config trst_only
}

# MPFS
proc setup_mpfs {device coreid tap_info hart_names} {
	set coreid [handle_coreid -1 4 $coreid ]

	# RISC-V CPU DTM TAP
	set irlen 8
	set expected_ids [expected_ids $tap_info]
	eval jtag newtap $device cpu -irlen $irlen $expected_ids -ignore-version

	# PolarFire SoC (MPFS)
	if {$coreid == -1} {
		# Single debug connection to all harts
		set _TARGETNAME_0 $device.$hart_names(0)
		set _TARGETNAME_1 $device.$hart_names(1)
		set _TARGETNAME_2 $device.$hart_names(2)
		set _TARGETNAME_3 $device.$hart_names(3)
		set _TARGETNAME_4 $device.$hart_names(4)

		target create $_TARGETNAME_0 riscv -chain-position $device.cpu -coreid 0 -rtos hwthread
		target create $_TARGETNAME_1 riscv -chain-position $device.cpu -coreid 1
		target create $_TARGETNAME_2 riscv -chain-position $device.cpu -coreid 2
		target create $_TARGETNAME_3 riscv -chain-position $device.cpu -coreid 3
		target create $_TARGETNAME_4 riscv -chain-position $device.cpu -coreid 4
		target smp $_TARGETNAME_0 $_TARGETNAME_1 $_TARGETNAME_2 $_TARGETNAME_3 $_TARGETNAME_4

		$_TARGETNAME_1 configure -event reset-init init_regs
		$_TARGETNAME_2 configure -event reset-init init_regs
		$_TARGETNAME_3 configure -event reset-init init_regs
		$_TARGETNAME_4 configure -event reset-init init_regs

		# Register eNVM (flash) driver
		flash bank envm mchp 0x20220000 0x020000 0 0 $_TARGETNAME_0

	} else {
		# Debug connection to a specific hart
		set _TARGETNAME_0 $device.$hart_names($coreid)
		target create $_TARGETNAME_0 riscv -chain-position $device.cpu -coreid $coreid
	}

	# Read RISC-V CPU DTM IDCODE to identify the specific part
	init
	irscan $device.cpu 0xf
	set idcode [string tolower [drscan $device.cpu 32 0]]
	echo [format "Info : Attached to %s" [get_tap_type $idcode $tap_info]]

	$_TARGETNAME_0 configure -event reset-init board_reset_init
	$_TARGETNAME_0 configure -event reset-init init_regs

	# gdb-detach event handler
	$_TARGETNAME_0 configure -event gdb-detach {
		# resume execution on debugger detach
		resume
	}

	#
	# Utility procedures
	#

	proc board_reset_init {} {
		# call board level reset-init if defined
		if {[exists -proc do_board_reset_init]} {
			do_board_reset_init
		}
	}

	proc init_regs {} {
		reg pc 0
	}

	#
	# Reset configuration
	#

	# Only TRSTn supported
	reset_config trst_only
}

proc setup_pic64gx {device coreid tap_info hart_names } {
	set coreid [handle_coreid -1 4 $coreid ]

	# RISC-V CPU DTM TAP
	set irlen 8
	set expected_ids [expected_ids $tap_info]
	eval jtag newtap $device cpu -irlen $irlen $expected_ids -ignore-version

	# PIC64GX
	if {$coreid == -1} {
		# Single debug connection to all harts
		set _TARGETNAME_0 $device.$hart_names(0)
		set _TARGETNAME_1 $device.$hart_names(1)
		set _TARGETNAME_2 $device.$hart_names(2)
		set _TARGETNAME_3 $device.$hart_names(3)
		set _TARGETNAME_4 $device.$hart_names(4)

		target create $_TARGETNAME_0 riscv -chain-position $device.cpu -coreid 0 -rtos hwthread
		target create $_TARGETNAME_1 riscv -chain-position $device.cpu -coreid 1
		target create $_TARGETNAME_2 riscv -chain-position $device.cpu -coreid 2
		target create $_TARGETNAME_3 riscv -chain-position $device.cpu -coreid 3
		target create $_TARGETNAME_4 riscv -chain-position $device.cpu -coreid 4
		target smp $_TARGETNAME_0 $_TARGETNAME_1 $_TARGETNAME_2 $_TARGETNAME_3 $_TARGETNAME_4

		$_TARGETNAME_1 configure -event reset-init init_regs
		$_TARGETNAME_2 configure -event reset-init init_regs
		$_TARGETNAME_3 configure -event reset-init init_regs
		$_TARGETNAME_4 configure -event reset-init init_regs

		# Register eNVM (flash) driver
		flash bank envm mchp 0x20220000 0x020000 0 0 $_TARGETNAME_0

	} else {
		# Debug connection to a specific hart
		set _TARGETNAME_0 $device.$hart_names($coreid)
		target create $_TARGETNAME_0 riscv -chain-position $device.cpu -coreid $coreid
	}

	# Read RISC-V CPU DTM IDCODE to identify the specific part
	init
	irscan $device.cpu 0xf
	set idcode [string tolower [drscan $device.cpu 32 0]]
	echo [format "Info : Attached to %s" [get_tap_type $idcode $tap_info]]

	$_TARGETNAME_0 configure -event reset-init board_reset_init
	$_TARGETNAME_0 configure -event reset-init init_regs

	# gdb-detach event handler
	$_TARGETNAME_0 configure -event gdb-detach {
		# resume execution on debugger detach
		resume
	}

	#
	# Utility procedures
	#

	proc board_reset_init {} {
		# call board level reset-init if defined
		if {[exists -proc do_board_reset_init]} {
			do_board_reset_init
		}
	}

	proc init_regs {} {
		reg pc 0
	}

	#
	# Reset configuration
	#

	# Only TRSTn supported
	reset_config trst_only
}

#
# Handle different riscv based devices
#
if {[string range $DEVICE 0 7] eq "pic64gx"} {
	echo [format "Info : Connecting to member of PIC64GX family"]
	set ret [setup_pic64gx $DEVICE $COREID $pic64gx_tap_info $pic64gx_hart_names]
} elseif {[string range $DEVICE 0 4] eq "mpfs"} {
	echo [format "Info : Connecting to member of PolarFire SoC family"]
	set ret [setup_mpfs $DEVICE $COREID $mpfs_cpu_tap_info $mpfs_hart_names]
} elseif {[string range $DEVICE 0 4] eq "fpga"} {
	echo [format "Info : Connecting via ujtag tunnel to soft MiV processor on FPGA"]
	# limit Soft CPU FPGAs
	set fpga_tap_info [concat $polarfire_tap_info $rtg4_tap_info]
	set ret [setup_tunnelled_miv $DEVICE $fpga_tap_info $miv_tap_info]
} elseif {[string range $DEVICE 0 3] eq "miv"} {
	echo [format "Info : Connecting to soft MiV processor on FPGA"]
	set ret [setup_miv $DEVICE $miv_tap_info]
} else {
	echo [format "Error: Unknown DEVICE %s" $DEVICE]
}

